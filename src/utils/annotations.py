import os
import json
import cv2

from detectron2.structures import BoxMode
from config import VRD_DATASET_PATH
from utils.dataset import VRDDataset


def load_detections_dataset(dataset_name):
    """
    load detection dataset from the given path
    Input:
        dataset_name: 'vrd/train' or 'vrd/val'
    """
    set_name, set_type = dataset_name.split("/")
    if set_name == "vrd":
        # dataset path
        dataset_path = VRD_DATASET_PATH

        # detections data
        detections = {}
        file_name = "detections_{}.json".format(set_type)
        with open(os.path.join(dataset_path, file_name)) as detections_file:
            detections = json.load(detections_file)

        # object class labels
        objects = []
        with open(os.path.join(dataset_path, "objects.json")) as objects_file:
            objects = json.load(objects_file)

        # predicates class
        predicates = []
        with open(os.path.join(dataset_path, "predicates.json")) as predicates_file:
            predicates = json.load(predicates_file)

        return (detections, objects, predicates)


def get_dataset_dicts(dataset_name):
    """
    Load raw annotation dataset and convert it into standard detectron2 format
    Input:
        dataset_name: 'vrd/train' or 'vrd/val'
    """
    dataset_dicts = []
    set_name, set_type = dataset_name.split("/")
    if set_name == "vrd":
        # Check whether the annotation file already exists
        output_file_path = os.path.join(
            VRD_DATASET_PATH,
            "{}_{}_detectron2_annotations.json".format(set_name, set_type),
        )
        if os.path.exists(output_file_path):
            with open(output_file_path) as fp:
                dataset_dicts = json.load(fp)
            return dataset_dicts

        # VRD data path
        dataset_path = VRD_DATASET_PATH

        # load annotations file
        annotations = {}
        file_name = "new_annotations_{}.json".format(set_type)
        with open(os.path.join(dataset_path, file_name)) as annotations_file:
            annotations = json.load(annotations_file)

        # Map 'annotations' to the correct format
        img_file_dir = os.path.join(VRD_DATASET_PATH, "{}_images".format(set_type))
        for key, val in annotations.items():
            record = {}

            # populating image fields
            img_file_path = os.path.join(img_file_dir, key)
            height, width = cv2.imread(img_file_path).shape[:2]

            record["file_name"] = img_file_path
            record["height"] = height
            record["width"] = width
            record["image_id"] = int(key.split(".")[0])

            # populating annotations from record
            objs = []
            visited = set()
            for anno in val:
                subj = anno["subject"]  # ymin, ymax, xmin, xmax
                obj = anno["object"]
                bbox_subj = subj["bbox"]
                bbox_obj = obj["bbox"]
                new_bbox_subj = [bbox_subj[2], bbox_subj[0], bbox_subj[3], bbox_subj[1]]
                new_bbox_obj = [bbox_obj[2], bbox_obj[0], bbox_obj[3], bbox_obj[1]]

                subj_dict = {
                    "bbox": new_bbox_subj,
                    "bbox_mode": BoxMode.XYXY_ABS,
                    "category_id": subj["category"],
                }
                if tuple(bbox_subj) not in visited:
                    objs.append(subj_dict)
                    visited.add(tuple(bbox_subj))

                obj_dict = {
                    "bbox": new_bbox_obj,
                    "bbox_mode": BoxMode.XYXY_ABS,
                    "category_id": obj["category"],
                }
                if tuple(bbox_obj) not in visited:
                    objs.append(obj_dict)
                    visited.add(tuple(bbox_obj))

            record["annotations"] = objs

            # add img to dataset dict
            dataset_dicts.append(record)
    else:
        pass

    # Save dataset_dicts
    with open(output_file_path, "w") as fp:
        json.dump(dataset_dicts, fp)
    return dataset_dicts


def get_detections_dicts(dataset_name, detections):
    """
    Deprecated
    Take in raw detections data generated by the Vision Model
        and transform it into the standard detectron2 format
    Input:
        dataset_name: 'vrd/train' or 'vrd/test'
        detections: raw detection annotations
    """
    dataset_dicts = []
    output_file_path = ""
    set_name, set_type = dataset_name.split("/")

    # Generate annotaions for detectron2
    if set_name == "vrd":
        # Check whether the annotation file already exists
        output_file_path = os.path.join(
            VRD_DATASET_PATH,
            "{}_{}_detectron2_detections.json".format(set_name, set_type),
        )
        if os.path.exists(output_file_path):
            with open(output_file_path) as fp:
                dataset_dicts = json.load(fp)
            return dataset_dicts

        # Generate annotations
        img_file_dir = os.path.join(VRD_DATASET_PATH, "{}_images".format(set_type))
        for i in range(len(detections["images"])):
            record = {}

            # record from json file
            img_record = detections["images"][i]

            # populating image fields from img_record
            img_file_path = os.path.join(img_file_dir, img_record["file_name"])
            img_id = img_record["id"]
            height, width = cv2.imread(img_file_path).shape[:2]

            record["file_name"] = img_file_path
            record["height"] = height
            record["width"] = width
            record["image_id"] = img_id

            # populating annotations from annotation_record
            objs = []
            annotation_records = [
                anno for anno in detections["annotations"] if anno["image_id"] == img_id
            ]
            for anno in annotation_records:
                obj = {
                    "bbox": anno["bbox"],
                    "bbox_mode": BoxMode.XYWH_ABS,
                    "category_id": anno["category_id"],
                    "iscrowd": anno["iscrowd"],
                }
                objs.append(obj)
            record["annotations"] = objs

            # add img to dataset dict
            dataset_dicts.append(record)
    else:
        # no implementation for vg200 for now
        pass

    # Save dataset_dicts
    with open(output_file_path, "w") as fp:
        json.dump(dataset_dicts, fp)
    return dataset_dicts


def get_vrd_dicts(dataset_name):
    set_name, set_type = dataset_name.split("/")
    dataset = None
    if set_name == "vrd":
        dataset = VRDDataset(set_type=set_type)
    return dataset


def get_object_classes(set_name):
    if set_name == "vrd":
        classes = []
        with open(os.path.join(VRD_DATASET_PATH, "objects.json")) as fp:
            classes = json.load(fp)
        return classes
    elif set_name == "vg":
        # to be implemented
        pass
    else:
        raise NotImplementedError


def get_predicate_classes(set_name):
    if set_name == "vrd":
        classes = []
        with open(os.path.join(VRD_DATASET_PATH, "predicates.json")) as fp:
            classes = json.load(fp)
        # add unknown predicate class for missing predicates
        # classes.insert(0, 'unknown')
        classes.append("unrelated")
        return classes
    elif set_name == "vg":
        # to be implemented
        pass
    else:
        raise NotImplementedError
